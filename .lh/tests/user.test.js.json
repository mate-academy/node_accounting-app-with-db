{
    "sourceFile": "tests/user.test.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 2,
            "patches": [
                {
                    "date": 1718794144783,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1718794180715,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -42,9 +42,9 @@\n     serverInstance = server.listen(7080, () => {\n       console.log(HOST);\n     });\n \n-    await User.destroy({ truncate: true, cascade: true });\n+    await User.destroy({ truncate: true });\n   });\n \n   afterEach(async () => {\n     if (serverInstance) {\n"
                },
                {
                    "date": 1718794492834,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -42,9 +42,9 @@\n     serverInstance = server.listen(7080, () => {\n       console.log(HOST);\n     });\n \n-    await User.destroy({ truncate: true });\n+    await User.destroy({ truncate: true, cascade: true });\n   });\n \n   afterEach(async () => {\n     if (serverInstance) {\n"
                }
            ],
            "date": 1718794144783,
            "name": "Commit-0",
            "content": "/* eslint-disable no-console */\n'use strict';\n\nconst axios = require('axios');\nconst https = require('https');\n\nconst {\n  models: { User },\n} = require('../src/models/models');\nconst { createServer } = require('../src/createServer');\nconst { sequelize } = require('../src/db');\nconst { Agent } = require('http');\n\n// this prevents `socket hang up` for Node.js 20.10+\naxios.defaults.httpAgent = new Agent({ keepAlive: false });\n\ndescribe('User', () => {\n  let server;\n  let serverInstance;\n  let api;\n\n  const HOST = 'http://localhost:7080/';\n\n  beforeAll(async () => {\n    try {\n      await sequelize.sync({ force: true });\n    } catch (err) {\n      console.log(err);\n    }\n\n    api = axios.create({\n      baseURL: HOST,\n      httpsAgent: new https.Agent({\n        rejectUnauthorized: false,\n      }),\n    });\n  }, 7000);\n\n  beforeEach(async () => {\n    server = createServer();\n\n    serverInstance = server.listen(7080, () => {\n      console.log(HOST);\n    });\n\n    await User.destroy({ truncate: true, cascade: true });\n  });\n\n  afterEach(async () => {\n    if (serverInstance) {\n      await serverInstance.close();\n    }\n  });\n\n  afterAll(async () => {\n    await sequelize.close();\n  });\n\n  describe('createUser', () => {\n    it('should create a new user', async () => {\n      const name = 'John Doe';\n\n      const res = await api.post('users', { name });\n\n      expect(res.status).toBe(201);\n\n      expect(res.headers['content-type']).toBe(\n        'application/json; charset=utf-8',\n      );\n\n      expect(res.data).toEqual(\n        expect.objectContaining({\n          id: expect.any(Number),\n          name,\n        }),\n      );\n    });\n\n    it('should return 400 if name is not provided', async () => {\n      expect.assertions(1);\n\n      await api\n        .post('users')\n        .catch((err) => expect(err.response.status).toBe(400));\n    });\n  });\n\n  describe('getUsers', () => {\n    it('should return empty array if no users', async () => {\n      const response = await api.get('users');\n\n      expect(response.status).toBe(200);\n\n      expect(response.headers['content-type']).toBe(\n        'application/json; charset=utf-8',\n      );\n\n      expect(response.data).toEqual([]);\n    });\n\n    it('should return all users', async () => {\n      const users = [\n        {\n          name: 'John Doe',\n        },\n        {\n          name: 'Jane Doe',\n        },\n      ];\n\n      const createdUsers = await Promise.all(\n        users.map(async (user) => {\n          const res = await api.post('users', user);\n\n          return res.data;\n        }),\n      );\n\n      const response = await api.get('users');\n\n      expect(response.status).toBe(200);\n\n      expect(response.headers['content-type']).toBe(\n        'application/json; charset=utf-8',\n      );\n\n      expect(response.data).toEqual(expect.arrayContaining(createdUsers));\n    });\n  });\n\n  describe('getUser', () => {\n    it('should return 404 if user does not exist', async () => {\n      expect.assertions(1);\n\n      await api\n        .get('users/1')\n        .catch((err) => expect(err.response.status).toBe(404));\n    });\n\n    it('should return user', async () => {\n      const { data: createdUser } = await api.post('users', {\n        name: 'John Doe',\n      });\n\n      const response = await api.get(`users/${createdUser.id}`);\n\n      expect(response.status).toBe(200);\n\n      expect(response.headers['content-type']).toBe(\n        'application/json; charset=utf-8',\n      );\n\n      expect(response.data).toEqual(createdUser);\n    });\n  });\n\n  describe('updateUser', () => {\n    it('should return 404 if user does not exist', async () => {\n      expect.assertions(1);\n\n      await api\n        .put('users/1', { name: 'John Doe' })\n        .catch((err) => expect(err.response.status).toBe(404));\n    });\n\n    it('should update user', async () => {\n      const { data: createdUser } = await api.post('/users', {\n        name: 'John Doe',\n      });\n\n      const response = await api.patch(`users/${createdUser.id}`, {\n        name: 'Jane Doe',\n      });\n\n      expect(response.status).toBe(200);\n\n      expect(response.headers['content-type']).toBe(\n        'application/json; charset=utf-8',\n      );\n\n      expect(response.data).toEqual({\n        ...createdUser,\n        name: 'Jane Doe',\n      });\n    });\n  });\n\n  describe('deleteUser', () => {\n    it('should return 404 if user does not exist', async () => {\n      expect.assertions(1);\n\n      await api\n        .delete('users/1')\n        .catch((err) => expect(err.response.status).toBe(404));\n    });\n\n    it('should delete user', async () => {\n      const createdUser = await api.post('users', { name: 'John Doe' });\n\n      const res = await api.delete(`users/${createdUser.data.id}`);\n\n      expect(res.status).toBe(204);\n\n      await api\n        .get(`users/${createdUser.data.id}`)\n        .catch((err) => expect(err.response.status).toBe(404));\n    });\n  });\n});\n"
        }
    ]
}