{
    "sourceFile": "src/services/expenses.service.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 18,
            "patches": [
                {
                    "date": 1718790925450,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1718790949112,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,8 +2,11 @@\n const { dateValidator } = require('../utils/dateValidator');\n const userService = require('./users.service');\n \n const { op } = require('sequelize');\n+const {\n+  models: { Expense },\n+} = require('sequelize');\n let expenses = [];\n \n const getId = () => {\n   return expenses.length ? Math.floor(Math.random() * 2137) : 1;\n"
                },
                {
                    "date": 1718791207025,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,34 +1,56 @@\n-const { dateComparer } = require('../utils/dateComparer');\n-const { dateValidator } = require('../utils/dateValidator');\n-const userService = require('./users.service');\n-\n const { op } = require('sequelize');\n const {\n   models: { Expense },\n } = require('sequelize');\n-let expenses = [];\n \n const getId = () => {\n   return expenses.length ? Math.floor(Math.random() * 2137) : 1;\n };\n \n-const getExpenses = (userId, categories, from, to) => {\n-  if (categories && !Array.isArray(categories)) {\n-    throw new Error('invalid categories');\n+const getExpenses = async (userId, categories, from, to) => {\n+  const path = {};\n+\n+  if (userId) {\n+    path.userId = userId;\n   }\n \n-  if ((from && !dateValidator(from)) || (to && !dateValidator(to))) {\n-    throw new Error('invalid date');\n+  if (Array.isArray(categories)) {\n+    path.category = {\n+      [op.in]: categories,\n+    };\n+  } else if (categories) {\n+    path.category = categories;\n   }\n \n-  return expenses.filter(\n-    (e) =>\n-      (!userId || e.userId === userId) &&\n-      (!categories || categories.some((c) => c === e.category)) &&\n-      (!from || dateComparer(e.spentAt, from) >= 0) &&\n-      (!to || dateComparer(e.spentAt, to) <= 0),\n-  );\n+  if (from && to) {\n+    path.spentAt = {\n+      [op.between]: [form, to],\n+    };\n+  } else if (from) {\n+    path.spentAt = {\n+      [op.gt]: from,\n+    };\n+  } else if (to) {\n+    path.spentAt = {\n+      [op.lt]: to,\n+    };\n+  }\n+  // if (categories && !Array.isArray(categories)) {\n+  //   throw new Error('invalid categories');\n+  // }\n+\n+  // if ((from && !dateValidator(from)) || (to && !dateValidator(to))) {\n+  //   throw new Error('invalid date');\n+  // }\n+\n+  // return expenses.filter(\n+  //   (e) =>\n+  //     (!userId || e.userId === userId) &&\n+  //     (!categories || categories.some((c) => c === e.category)) &&\n+  //     (!from || dateComparer(e.spentAt, from) >= 0) &&\n+  //     (!to || dateComparer(e.spentAt, to) <= 0),\n+  // );\n };\n \n const addExpense = ({\n   userId,\n"
                },
                {
                    "date": 1718791234143,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -34,23 +34,10 @@\n     path.spentAt = {\n       [op.lt]: to,\n     };\n   }\n-  // if (categories && !Array.isArray(categories)) {\n-  //   throw new Error('invalid categories');\n-  // }\n \n-  // if ((from && !dateValidator(from)) || (to && !dateValidator(to))) {\n-  //   throw new Error('invalid date');\n-  // }\n-\n-  // return expenses.filter(\n-  //   (e) =>\n-  //     (!userId || e.userId === userId) &&\n-  //     (!categories || categories.some((c) => c === e.category)) &&\n-  //     (!from || dateComparer(e.spentAt, from) >= 0) &&\n-  //     (!to || dateComparer(e.spentAt, to) <= 0),\n-  // );\n+  return Expense.findAll({ path });\n };\n \n const addExpense = ({\n   userId,\n"
                },
                {
                    "date": 1718791275047,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -38,57 +38,10 @@\n \n   return Expense.findAll({ path });\n };\n \n-const addExpense = ({\n-  userId,\n-  spentAt,\n-  title,\n-  amount,\n-  category,\n-  note = '',\n-}) => {\n-  if (typeof userId !== 'number') {\n-    throw new Error('invalid userId');\n-  } else if (!userService.getUser(userId)) {\n-    throw new Error('user not found');\n-  }\n+const addExpense = async ({ expenseData }) => {};\n \n-  if (!dateValidator(spentAt)) {\n-    throw new Error('invalid date');\n-  }\n-\n-  if (typeof title !== 'string') {\n-    throw new Error('invalid title');\n-  }\n-\n-  if (typeof amount !== 'number') {\n-    throw new Error('invalid amount');\n-  }\n-\n-  if (typeof category !== 'string') {\n-    throw new Error('invalid category');\n-  }\n-\n-  if (typeof note !== 'string') {\n-    throw new Error('invalid note');\n-  }\n-\n-  const expense = {\n-    id: getId(),\n-    userId,\n-    spentAt,\n-    title,\n-    amount,\n-    category,\n-    note,\n-  };\n-\n-  expenses = [...expenses, expense];\n-\n-  return expense;\n-};\n-\n const getExpense = (id) => {\n   return expenses.find((e) => e.id === id);\n };\n \n"
                },
                {
                    "date": 1718791321478,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -38,9 +38,11 @@\n \n   return Expense.findAll({ path });\n };\n \n-const addExpense = async ({ expenseData }) => {};\n+const addExpense = async ({ expenseData }) => {\n+  return Expense.create(expenseData);\n+};\n \n const getExpense = (id) => {\n   return expenses.find((e) => e.id === id);\n };\n"
                },
                {
                    "date": 1718791337456,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -41,8 +41,9 @@\n \n const addExpense = async ({ expenseData }) => {\n   return Expense.create(expenseData);\n };\n+// mozliwy błąd\n \n const getExpense = (id) => {\n   return expenses.find((e) => e.id === id);\n };\n"
                },
                {
                    "date": 1718791365345,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -44,9 +44,9 @@\n };\n // mozliwy błąd\n \n const getExpense = (id) => {\n-  return expenses.find((e) => e.id === id);\n+  return Expense.findByPk(=id)\n };\n \n const deleteExpense = (id) => {\n   let exists = false;\n"
                },
                {
                    "date": 1718791378089,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -43,13 +43,13 @@\n   return Expense.create(expenseData);\n };\n // mozliwy błąd\n \n-const getExpense = (id) => {\n-  return Expense.findByPk(=id)\n+const getExpense = async (id) => {\n+  return Expense.findByPk(+id);\n };\n \n-const deleteExpense = (id) => {\n+const deleteExpense = async (id) => {\n   let exists = false;\n \n   expenses = expenses.filter((e) => {\n     if (e.id === id) {\n"
                },
                {
                    "date": 1718791585196,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -43,80 +43,18 @@\n   return Expense.create(expenseData);\n };\n // mozliwy błąd\n \n-const getExpense = async (id) => {\n+const getExpense = (id) => {\n   return Expense.findByPk(+id);\n };\n \n const deleteExpense = async (id) => {\n-  let exists = false;\n-\n-  expenses = expenses.filter((e) => {\n-    if (e.id === id) {\n-      exists = true;\n-\n-      return false;\n-    }\n-\n-    return true;\n-  });\n-\n-  return exists;\n+  return Expense.destory({ path: { id } });\n };\n \n-const updateExpense = (id, expenseData) => {\n-  if (typeof expenseData !== 'object' || expenseData === null) {\n-    throw new Error('invalid data');\n-  }\n-\n-  const { userId, spentAt, title, amount, category, note } = expenseData;\n-\n-  if (userId && typeof userId !== 'number') {\n-    throw new Error('invalid userId');\n-  }\n-\n-  if (spentAt && !dateValidator(spentAt)) {\n-    throw new Error('invalid date');\n-  }\n-\n-  if (title && typeof title !== 'string') {\n-    throw new Error('invalid title');\n-  }\n-\n-  if (amount && typeof amount !== 'number') {\n-    throw new Error('invalid amount');\n-  }\n-\n-  if (category && typeof category !== 'string') {\n-    throw new Error('invalid category');\n-  }\n-\n-  if (note && typeof note !== 'string') {\n-    throw new Error('invalid note');\n-  }\n-\n-  let expense;\n-\n-  expenses = expenses.map((e) => {\n-    if (e.id === id) {\n-      expense = {\n-        ...e,\n-        userId: userId || e.userId,\n-        spentAt: spentAt || e.spentAt,\n-        title: title || e.title,\n-        amount: amount || e.amount,\n-        category: category || e.category,\n-        note: note || e.note,\n-      };\n-\n-      return expense;\n-    }\n-\n-    return e;\n-  });\n-\n-  return expense;\n+const updateExpense = async (id, expenseData) => {\n+  await Expense.update({ ...expenseData }, { where: { id } });\n };\n \n const deleteExpenses = () => {\n   expenses = [];\n"
                },
                {
                    "date": 1718791621550,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,50 +7,49 @@\n   return expenses.length ? Math.floor(Math.random() * 2137) : 1;\n };\n \n const getExpenses = async (userId, categories, from, to) => {\n-  const path = {};\n+  const where = {};\n \n   if (userId) {\n-    path.userId = userId;\n+    where.userId = userId;\n   }\n \n   if (Array.isArray(categories)) {\n-    path.category = {\n+    where.category = {\n       [op.in]: categories,\n     };\n   } else if (categories) {\n-    path.category = categories;\n+    where.category = categories;\n   }\n \n   if (from && to) {\n-    path.spentAt = {\n+    where.spentAt = {\n       [op.between]: [form, to],\n     };\n   } else if (from) {\n-    path.spentAt = {\n+    where.spentAt = {\n       [op.gt]: from,\n     };\n   } else if (to) {\n-    path.spentAt = {\n+    where.spentAt = {\n       [op.lt]: to,\n     };\n   }\n \n-  return Expense.findAll({ path });\n+  return Expense.findAll({ where });\n };\n \n const addExpense = async ({ expenseData }) => {\n   return Expense.create(expenseData);\n };\n-// mozliwy błąd\n \n const getExpense = (id) => {\n   return Expense.findByPk(+id);\n };\n \n const deleteExpense = async (id) => {\n-  return Expense.destory({ path: { id } });\n+  return Expense.destory({ where: { id } });\n };\n \n const updateExpense = async (id, expenseData) => {\n   await Expense.update({ ...expenseData }, { where: { id } });\n"
                },
                {
                    "date": 1718791690006,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,6 @@\n const { op } = require('sequelize');\n-const {\n-  models: { Expense },\n-} = require('sequelize');\n+const { Expense } = require('sequelize');\n \n const getId = () => {\n   return expenses.length ? Math.floor(Math.random() * 2137) : 1;\n };\n"
                },
                {
                    "date": 1718791801552,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,11 +1,7 @@\n const { op } = require('sequelize');\n const { Expense } = require('sequelize');\n \n-const getId = () => {\n-  return expenses.length ? Math.floor(Math.random() * 2137) : 1;\n-};\n-\n const getExpenses = async (userId, categories, from, to) => {\n   const where = {};\n \n   if (userId) {\n"
                },
                {
                    "date": 1718791834412,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -48,16 +48,11 @@\n const updateExpense = async (id, expenseData) => {\n   await Expense.update({ ...expenseData }, { where: { id } });\n };\n \n-const deleteExpenses = () => {\n-  expenses = [];\n-};\n-\n module.exports = {\n   getExpenses,\n   getExpense,\n   deleteExpense,\n-  deleteExpenses,\n   addExpense,\n   updateExpense,\n };\n"
                },
                {
                    "date": 1718791843473,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,9 +17,9 @@\n   }\n \n   if (from && to) {\n     where.spentAt = {\n-      [op.between]: [form, to],\n+      [op.between]: [from, to],\n     };\n   } else if (from) {\n     where.spentAt = {\n       [op.gt]: from,\n"
                },
                {
                    "date": 1718792322861,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -46,8 +46,10 @@\n };\n \n const updateExpense = async (id, expenseData) => {\n   await Expense.update({ ...expenseData }, { where: { id } });\n+\n+  return Expense.findByPk(id);\n };\n \n module.exports = {\n   getExpenses,\n"
                },
                {
                    "date": 1718793263640,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -45,13 +45,21 @@\n   return Expense.destory({ where: { id } });\n };\n \n const updateExpense = async (id, expenseData) => {\n-  await Expense.update({ ...expenseData }, { where: { id } });\n+  try {\n+    const [, [expense]] = await Expense.update(expenseData, {\n+      where: {\n+        id,\n+      },\n+      returning: true,\n+    });\n \n-  return Expense.findByPk(id);\n+    return expense;\n+  } catch (error) {\n+    throw new Error('invalid data');\n+  }\n };\n-\n module.exports = {\n   getExpenses,\n   getExpense,\n   deleteExpense,\n"
                },
                {
                    "date": 1718793291055,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,75 @@\n+const { op } = require('sequelize');\n+const { Expense } = require('sequelize');\n+\n+const getExpenses = async (userId, categories, from, to) => {\n+  const where = {};\n+\n+  if (userId) {\n+    where.userId = userId;\n+  }\n+\n+  if (Array.isArray(categories)) {\n+    where.category = {\n+      [op.in]: categories,\n+    };\n+  } else if (categories) {\n+    where.category = categories;\n+  }\n+\n+  if (from && to) {\n+    where.spentAt = {\n+      [op.between]: [from, to],\n+    };\n+  } else if (from) {\n+    where.spentAt = {\n+      [op.gt]: from,\n+    };\n+  } else if (to) {\n+    where.spentAt = {\n+      [op.lt]: to,\n+    };\n+  }\n+\n+  return Expense.findAll({ where });\n+};\n+\n+const addExpense = async ({ expenseData }) => {\n+  return Expense.create(expenseData);\n+};\n+\n+const getExpense = (id) => {\n+  return Expense.findByPk(+id);\n+};\n+\n+const deleteExpense = async (id) => {\n+  const rows = await Expense.destroy({\n+    where: {\n+      id,\n+    },\n+  });\n+\n+  return rows === 1;\n+};\n+\n+const updateExpense = async (id, expenseData) => {\n+  try {\n+    const [, [expense]] = await Expense.update(expenseData, {\n+      where: {\n+        id,\n+      },\n+      returning: true,\n+    });\n+\n+    return expense;\n+  } catch (error) {\n+    throw new Error('invalid data');\n+  }\n+};\n+\n+module.exports = {\n+  getExpenses,\n+  getExpense,\n+  deleteExpense,\n+  addExpense,\n+  updateExpense,\n+};\n"
                },
                {
                    "date": 1718793957166,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,8 @@\n const { op } = require('sequelize');\n-const { Expense } = require('sequelize');\n-\n+const {\n+  models: { Expense },\n+} = require('../models/models');\n const getExpenses = async (userId, categories, from, to) => {\n   const where = {};\n \n   if (userId) {\n@@ -72,72 +73,4 @@\n   deleteExpense,\n   addExpense,\n   updateExpense,\n };\n-const { op } = require('sequelize');\n-const { Expense } = require('sequelize');\n-\n-const getExpenses = async (userId, categories, from, to) => {\n-  const where = {};\n-\n-  if (userId) {\n-    where.userId = userId;\n-  }\n-\n-  if (Array.isArray(categories)) {\n-    where.category = {\n-      [op.in]: categories,\n-    };\n-  } else if (categories) {\n-    where.category = categories;\n-  }\n-\n-  if (from && to) {\n-    where.spentAt = {\n-      [op.between]: [from, to],\n-    };\n-  } else if (from) {\n-    where.spentAt = {\n-      [op.gt]: from,\n-    };\n-  } else if (to) {\n-    where.spentAt = {\n-      [op.lt]: to,\n-    };\n-  }\n-\n-  return Expense.findAll({ where });\n-};\n-\n-const addExpense = async ({ expenseData }) => {\n-  return Expense.create(expenseData);\n-};\n-\n-const getExpense = (id) => {\n-  return Expense.findByPk(+id);\n-};\n-\n-const deleteExpense = async (id) => {\n-  return Expense.destory({ where: { id } });\n-};\n-\n-const updateExpense = async (id, expenseData) => {\n-  try {\n-    const [, [expense]] = await Expense.update(expenseData, {\n-      where: {\n-        id,\n-      },\n-      returning: true,\n-    });\n-\n-    return expense;\n-  } catch (error) {\n-    throw new Error('invalid data');\n-  }\n-};\n-module.exports = {\n-  getExpenses,\n-  getExpense,\n-  deleteExpense,\n-  addExpense,\n-  updateExpense,\n-};\n"
                }
            ],
            "date": 1718790925450,
            "name": "Commit-0",
            "content": "const { dateComparer } = require('../utils/dateComparer');\nconst { dateValidator } = require('../utils/dateValidator');\nconst userService = require('./users.service');\n\nconst { op } = require('sequelize');\nlet expenses = [];\n\nconst getId = () => {\n  return expenses.length ? Math.floor(Math.random() * 2137) : 1;\n};\n\nconst getExpenses = (userId, categories, from, to) => {\n  if (categories && !Array.isArray(categories)) {\n    throw new Error('invalid categories');\n  }\n\n  if ((from && !dateValidator(from)) || (to && !dateValidator(to))) {\n    throw new Error('invalid date');\n  }\n\n  return expenses.filter(\n    (e) =>\n      (!userId || e.userId === userId) &&\n      (!categories || categories.some((c) => c === e.category)) &&\n      (!from || dateComparer(e.spentAt, from) >= 0) &&\n      (!to || dateComparer(e.spentAt, to) <= 0),\n  );\n};\n\nconst addExpense = ({\n  userId,\n  spentAt,\n  title,\n  amount,\n  category,\n  note = '',\n}) => {\n  if (typeof userId !== 'number') {\n    throw new Error('invalid userId');\n  } else if (!userService.getUser(userId)) {\n    throw new Error('user not found');\n  }\n\n  if (!dateValidator(spentAt)) {\n    throw new Error('invalid date');\n  }\n\n  if (typeof title !== 'string') {\n    throw new Error('invalid title');\n  }\n\n  if (typeof amount !== 'number') {\n    throw new Error('invalid amount');\n  }\n\n  if (typeof category !== 'string') {\n    throw new Error('invalid category');\n  }\n\n  if (typeof note !== 'string') {\n    throw new Error('invalid note');\n  }\n\n  const expense = {\n    id: getId(),\n    userId,\n    spentAt,\n    title,\n    amount,\n    category,\n    note,\n  };\n\n  expenses = [...expenses, expense];\n\n  return expense;\n};\n\nconst getExpense = (id) => {\n  return expenses.find((e) => e.id === id);\n};\n\nconst deleteExpense = (id) => {\n  let exists = false;\n\n  expenses = expenses.filter((e) => {\n    if (e.id === id) {\n      exists = true;\n\n      return false;\n    }\n\n    return true;\n  });\n\n  return exists;\n};\n\nconst updateExpense = (id, expenseData) => {\n  if (typeof expenseData !== 'object' || expenseData === null) {\n    throw new Error('invalid data');\n  }\n\n  const { userId, spentAt, title, amount, category, note } = expenseData;\n\n  if (userId && typeof userId !== 'number') {\n    throw new Error('invalid userId');\n  }\n\n  if (spentAt && !dateValidator(spentAt)) {\n    throw new Error('invalid date');\n  }\n\n  if (title && typeof title !== 'string') {\n    throw new Error('invalid title');\n  }\n\n  if (amount && typeof amount !== 'number') {\n    throw new Error('invalid amount');\n  }\n\n  if (category && typeof category !== 'string') {\n    throw new Error('invalid category');\n  }\n\n  if (note && typeof note !== 'string') {\n    throw new Error('invalid note');\n  }\n\n  let expense;\n\n  expenses = expenses.map((e) => {\n    if (e.id === id) {\n      expense = {\n        ...e,\n        userId: userId || e.userId,\n        spentAt: spentAt || e.spentAt,\n        title: title || e.title,\n        amount: amount || e.amount,\n        category: category || e.category,\n        note: note || e.note,\n      };\n\n      return expense;\n    }\n\n    return e;\n  });\n\n  return expense;\n};\n\nconst deleteExpenses = () => {\n  expenses = [];\n};\n\nmodule.exports = {\n  getExpenses,\n  getExpense,\n  deleteExpense,\n  deleteExpenses,\n  addExpense,\n  updateExpense,\n};\n"
        }
    ]
}